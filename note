  <div class="col-md-12" style="text-align: center;">
                <h4><b>Data Report</b></h4>
            </div>

            <div class="portlet">

                <div class="portlet-body">
                    <div class="table-scrollable table-responsive">
                        <table class="table table-striped table-bordered table-advance table-hover">
                            <thead>
                            <tr>
                                <th> {{ _t('Contact#') }} </th>
                                <th> {{ _t('username') }} </th>
                                <th> {{ _t('email') }} </th>
                                <th style="width: 9px;"></th>
                            </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>aaa </td>
                                    <td>aaa </td>
                                    <td>aa </td>
                                    <td> aaa</td>
                                </tr>
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>
=============================================
Next I created a HelperServiceProvider.php by running the artisan command:

php artisan make:provider HelperServiceProvider

Within the register method I added this snippet

public function register()
{
    foreach (glob(app_path().'/Helpers/*.php') as $filename){
        require_once($filename);
    }
}
lastly register the service provider in your config/app.php in the providers array

'providers' => [
    'App\Providers\HelperServiceProvider',
]
now any file in your Helpers directory is loaded, and ready for use.

composer dumpautoload

=============================================

php artisan make:middleware Xxx

 protected $routeMiddleware = [

        'Xxx' => \App\Http\Middleware\Xxx::class,
    ];

   ==================
 public function handle($request, Closure $next, $isUser = 1, $isAdmin= 1)
    {
        if(!$request->session()->has('mysess.id'))
        {
           return redirect('/login-admin');
        }
//        echo $request->session()->get('mysess.role_id');
//        exit();
            if ($request->session()->get('mysess.role_id') - 0 == 2 && $isAdmin-0 == 1) {

                if ($isUser !=1){
                    return redirect('/no-permission');
                }
                return $next($request);
            }
            if ($request->session()->get('mysess.role_id') - 0 == 1 && $isUser-0 == 1 ) {
                //return redirect('/no-permission');
                if ($isAdmin ==1){
                    return redirect('/no-permission');
                }
                return $next($request);
            }
            return $next($request);

    }
 ///===================================

 ['prefix' => 'cpanel','namespace' => 'Admin','middleware' => 'MidAdmin:1,0'],

 \\\\\\\\\\\\\\\\\\

 //========= Controllers ===============
 //=====================================
 php artisan make:controller Admin/PhotoController
 php artisan make:model Models/Admin/Photo
 composer dump-autoload
 =========================
 Route::get('admin', 'Admin\AdminController@getHome');

 Route::group(['prefix' => 'admin',
 'middleware' => 'auth', 'namespace' => 'Admin'],
 function() {
 Route::get('/', 'AdminController@getHome');
 â€¦.
 });


 =========================
 Route::get('profile', 'UserController@show')->middleware('auth');

 //========= End Controllers ===============
 //=====================================


 //====== session ==========
 //=========================
 1 run =>   php artisan session:table
 2 runn =>  php artisan migrate

 3. in .env :

 SESSION_DRIVER=database

 //========================================================
 //Storing Data :
 // Via a request instance...
 $request->session()->put('key', 'value');

 // Via the global helper...
 session(['key' => 'value']);

 $request->session()->flash('status', 'Task was successful!');

 $request->session()->reflash();
 $request->session()->keep(['username', 'email']);
 //========================================================

 //Deleting Data
 $request->session()->forget('key');

 $request->session()->flush();
 //========================================================

 // Retrieving Data================
     $value = $request->session()->get('key', 'default');

     // Retrieve a piece of data from the session...
     $value = session('key');

     // Specifying a default value...
     $value = session('key', 'default');

 //====== end session ======
 //=========================
  $this->validate($request, [
     'role_id' => 'required',
     'phone' => 'required',
     'name' => 'required|max:255',
     'email' => 'required|email|max:255',
 ]);

 ================
 @if (count($errors) > 0)
     <div class="alert alert-danger">
         <ul>
             @foreach ($errors->all() as $error)
                 <li>{{ $error }}</li>
             @endforeach
         </ul>
     </div>
 @endif

 public function store(Request $request)
     {
         $validator = Validator::make($request->all(), [
             'title' => 'required|unique:posts|max:255',
             'body' => 'required',
         ]);

         if ($validator->fails()) {
             return redirect('post/create')
                         ->withErrors($validator)
                         ->withInput();
         }

         // Store the blog post...
     }


 //========== Middleware ==============
 ======================================
 php artisan make:middleware CheckAge

 =======================
 if ($request->age <= 200) {
             return redirect('home');
         }

         return $next($request);
 ========================
 $response = $next($request);

         // Perform action

         return $response;
 =========================


 class UserController extends Controller
 {
     /**
      * Instantiate a new controller instance.
      *
      * @return void
      */
     public function __construct()
     {
         $this->middleware('auth');

         $this->middleware('log')->only('index');

         $this->middleware('subscribed')->except('store');
     }
 }

 //==========End Middleware ==============
 =========================================

